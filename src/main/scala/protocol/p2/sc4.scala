// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package protocol.p2
import com.google.protobuf.CodedInputStream

/** 测试协议
  */
@SerialVersionUID(0L)
final case class sc4(
    success: _root_.scala.Boolean,
    userId: _root_.scala.Long,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[sc4] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = success
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
      };
      
      {
        val __value = userId
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      
      {
        val __v = success
        _output__.writeBool(1, __v)
      };
      
      {
        val __v = userId
        _output__.writeInt64(2, __v)
      };
      unknownFields.writeTo(_output__)
    }
    def withSuccess(__v: _root_.scala.Boolean): sc4 = copy(success = __v)
    def withUserId(__v: _root_.scala.Long): sc4 = copy(userId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => success
        case 2 => userId
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(success)
        case 2 => _root_.scalapb.descriptors.PLong(userId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: protocol.p2.sc4.type = protocol.p2.sc4
    // @@protoc_insertion_point(GeneratedMessage[protocol.sc4])
}

object sc4 extends scalapb.GeneratedMessageCompanion[protocol.p2.sc4] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[protocol.p2.sc4] = this
  override def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): protocol.p2.sc4 = {
    var __requiredFields0: _root_.scala.Long = 0x3L
    var __success: _root_.scala.Boolean = false
    var __userId: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __success = _input__.readBool()
          __requiredFields0 &= 0xfffffffffffffffeL
        case 16 =>
          __userId = _input__.readInt64()
          __requiredFields0 &= 0xfffffffffffffffdL
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
    protocol.p2.sc4(
        success = __success,
        userId = __userId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[protocol.p2.sc4] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      protocol.p2.sc4(
        success = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scala.Boolean],
        userId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[_root_.scala.Long]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P2Proto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P2Proto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = protocol.p2.sc4(
    success = false,
    userId = 0L
  )
  implicit class sc4Lens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, protocol.p2.sc4]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, protocol.p2.sc4](_l) {
    def success: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.success)((c_, f_) => c_.copy(success = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
  }
  final val SUCCESS_FIELD_NUMBER = 1
  final val USERID_FIELD_NUMBER = 2
  def of(
    success: _root_.scala.Boolean,
    userId: _root_.scala.Long
  ): _root_.protocol.p2.sc4 = _root_.protocol.p2.sc4(
    success,
    userId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[protocol.sc4])

  override def merge(a: sc4, input: CodedInputStream): sc4 = ???
}
